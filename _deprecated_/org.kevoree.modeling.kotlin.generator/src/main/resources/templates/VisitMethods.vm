#* @vtlvariable name="currentClass" type="org.eclipse.emf.ecore.EClass" *#
#* @vtlvariable name="FQNHelper" type="org.kevoree.modeling.kotlin.generator.ProcessorHelper" *#
#* @vtlvariable name="ctx" type="org.kevoree.modeling.kotlin.generator.GenerationContext" *#
#* @vtlvariable name="packElem" type="java.lang.String" *#

##if(!$currentClass.getEAllReferences().isEmpty())
override fun visit(visitor : org.kevoree.modeling.api.ModelVisitor, recursive : Boolean, containedReference : Boolean,nonContainedReference : Boolean){
            #if($ctx.persistence)
            checkLazyLoad()
            #end
            visitor.beginVisitElem(this)
            #set($firstGeneratedCont = true)
            #foreach( $ref in $currentClass.getEAllContainments())
                #if($firstGeneratedCont)
            if(containedReference){
                    #set($firstGeneratedCont = false)
                #end
                if(visitor.beginVisitRef(${ctx.basePackageForUtilitiesGeneration}.util.Constants.Ref_${ref.getName()}, ${ctx.basePackageForUtilitiesGeneration}.util.Constants.${FQNHelper.fqn($ctx, $ref.getEType()).replace(".", "_")})){
                #if($ref.isMany())
                    for(KMFLoopEntryKey in _${ref.getName()}.keySet()){
                        internal_visit(visitor,_${ref.getName()}.get(KMFLoopEntryKey),recursive,containedReference,nonContainedReference,${ctx.basePackageForUtilitiesGeneration}.util.Constants.Ref_${ref.getName()})
                    }
                #else
                    internal_visit(visitor,${FQNHelper.protectReservedWords(${ref.getName()})},recursive,containedReference,nonContainedReference,${ctx.basePackageForUtilitiesGeneration}.util.Constants.Ref_${ref.getName()})
                #end
                }
                visitor.endVisitRef(${ctx.basePackageForUtilitiesGeneration}.util.Constants.Ref_${ref.getName()})
            #end
            #if(!$firstGeneratedCont)
            }
            #end
           #set($firstGeneratedRef = true)
                #foreach( $ref in $currentClass.getEAllReferences())
                    #if(!$currentClass.getEAllContainments().contains($ref))
                        #if($firstGeneratedRef)
           if(nonContainedReference){
                            #set($firstGeneratedRef = false)
                        #end
                        if(visitor.beginVisitRef(${ctx.basePackageForUtilitiesGeneration}.util.Constants.Ref_${ref.getName()}, ${ctx.basePackageForUtilitiesGeneration}.util.Constants.${FQNHelper.fqn($ctx, $ref.getEType()).replace(".", "_")})){
                        #if($ref.isMany())
                            for(KMFLoopEntryKey in _${ref.getName()}.keySet()){
                                internal_visit(visitor,_${ref.getName()}.get(KMFLoopEntryKey),recursive,containedReference,nonContainedReference,${ctx.basePackageForUtilitiesGeneration}.util.Constants.Ref_${ref.getName()})
                            }
                        #else
                            internal_visit(visitor,${FQNHelper.protectReservedWords(${ref.getName()})},recursive,containedReference,nonContainedReference,${ctx.basePackageForUtilitiesGeneration}.util.Constants.Ref_${ref.getName()})
                        #end
                        }
                        visitor.endVisitRef(${ctx.basePackageForUtilitiesGeneration}.util.Constants.Ref_${ref.getName()})
                    #end
                #end
           #if(!$firstGeneratedRef)
           }
           #end
           visitor.endVisitElem(this)
}
##end

#if(!$currentClass.getEAllAttributes().isEmpty())
override fun visitAttributes(visitor : org.kevoree.modeling.api.ModelAttributeVisitor){
    #if($ctx.persistence)
    checkLazyLoad()
    #end
    #foreach( $att in ${FQNHelper.noduplicate($currentClass.getEAllAttributes())})
        visitor.visit(${FQNHelper.protectReservedWords($att.getName())},${ctx.basePackageForUtilitiesGeneration}.util.Constants.Att_${att.getName()},this)
    #end
}
#end
