#* @vtlvariable name="packageName" type="java.lang.String" *#
#* @vtlvariable name="formatedFactoryName" type="java.lang.String" *#
#* @vtlvariable name="formatedTimeView" type="java.lang.String" *#
#* @vtlvariable name="modelVersion" type="java.lang.String" *#
#* @vtlvariable name="classes" type="java.util.List<org.eclipse.emf.ecore.EClassifier>" *#
#* @vtlvariable name="ctx" type="org.kevoree.modeling.kotlin.generator.GenerationContext" *#
#* @vtlvariable name="helper" type="org.kevoree.modeling.kotlin.generator.ProcessorHelper" *#

package ${packageName}.factory;

#foreach( $class in $classes )
import $helper.fqn($ctx, $class);
#end

#if($ctx.persistence) #if(!$ctx.timeAware) open abstract #end #end class Default${formatedFactoryName}(#if($ctx.persistence) #if($ctx.timeAware) override var originTransaction: org.kevoree.modeling.api.Transaction,#end override val datastore : org.kevoree.modeling.api.persistence.DataStore #end #if($ctx.timeAware), override val sharedCache : org.kevoree.modeling.api.time.blob.SharedCache,override val relativeTime: Long   #end  ) : ${formatedFactoryName} #if($ctx.timeAware),org.kevoree.modeling.api.time.TimeAwareKFactory,${formatedTimeView} #else #if($ctx.persistence),org.kevoree.modeling.api.persistence.PersistenceKFactory #end #end {

override fun getVersion() : String { return "${modelVersion}" }

#if(!$ctx.persistence)
    override fun lookup(path: String): org.kevoree.modeling.api.KObject? {
        return null
    }
#end

#if($ctx.persistence)
override val elem_cache: MutableMap<String, org.kevoree.modeling.api.KObject> = java.util.concurrent.ConcurrentHashMap<String, org.kevoree.modeling.api.KObject>()
override val modified_elements: MutableMap<String, org.kevoree.modeling.api.KObject> = java.util.concurrent.ConcurrentHashMap<String, org.kevoree.modeling.api.KObject>()
override val elementsToBeRemoved : MutableSet<String> = java.util.HashSet<String>()
override var dirty : Boolean = false;

#end

#if($ctx.timeAware)
    override var entitiesCache: org.kevoree.modeling.api.time.blob.EntitiesMeta? = null
#end

#foreach( $class in $classes )
override fun create${class.getName()}() : $helper.fqn($ctx, $class) {
val tempElem = ${helper.fqn($ctx, $class.getEPackage())}.impl.${class.getName()}Impl( #if($ctx.timeAware) relativeTime #end )
    #if($ctx.persistence)
initObject(tempElem)
    #end
return tempElem
}
#end

override fun create(metaClassName : String) : ${ctx.kevoreeContainer}? {
when(metaClassName){
#foreach( $class in $classes )
    ${ctx.basePackageForUtilitiesGeneration}.util.Constants.${helper.fqn($ctx,$class).replace(".","_")} -> { return create${class.getName()}() }
#end            else -> {return null;}
}
}

#if($ctx.persistence)
    protected fun initObject(elem : org.kevoree.modeling.api.persistence.KObjectProxy){
        elem.originFactory = this
        monitor(elem)
        #if($ctx.timeAware)
        (elem as org.kevoree.modeling.api.time.TimeAwareKObject<*>).isResolved = true
        (elem as org.kevoree.modeling.api.time.TimeAwareKObject<*>).now = relativeTime
        (elem as org.kevoree.modeling.api.time.TimeAwareKObject<*>).meta = org.kevoree.modeling.api.time.blob.EntityMeta()
        (elem as org.kevoree.modeling.api.time.TimeAwareKObject<*>).meta!!.metatype = elem.metaClassName()
        #end
    }
#end

#if(!$ctx.persistence)
    override fun select(query: String): List<org.kevoree.modeling.api.KObject> {
        //TODO
        return java.util.ArrayList<org.kevoree.modeling.api.KObject>();
    }
    override fun root(elem : org.kevoree.modeling.api.KObject){
    (elem as ${ctx.getKevoreeContainerImplFQN()}).is_root = true
    (elem as ${ctx.getKevoreeContainerImplFQN()}).path_cache = "/"
    }
    #else
    override fun root(elem : org.kevoree.modeling.api.KObject){
    if(elem !is org.kevoree.modeling.api.persistence.KObjectProxy || (elem as org.kevoree.modeling.api.persistence.KObjectProxy).originFactory != this){
        throw Exception("KMFObject created in another factory of TimeView cannot be set as root of this TimeView")
    }
    if(lookup("/") != elem){
       elem.isDirty = true;
    }
    (elem as ${ctx.getKevoreeContainerImplFQN()}#if($ctx.timeAware)<*>#end).is_root = true
    (elem as ${ctx.getKevoreeContainerImplFQN()}#if($ctx.timeAware)<*>#end).path_cache = "/"
    modified_elements.put(elem.hashCode().toString() + elem.internalGetKey(), elem)
    elem_cache.put("/", elem)
    }
    #end

    override fun createJSONSerializer(): org.kevoree.modeling.api.json.JSONModelSerializer {
        return org.kevoree.modeling.api.json.JSONModelSerializer()
    }
    override fun createJSONLoader(): org.kevoree.modeling.api.json.JSONModelLoader {
        return org.kevoree.modeling.api.json.JSONModelLoader(this)
    }
    override fun createXMISerializer(): org.kevoree.modeling.api.xmi.XMIModelSerializer {
        return org.kevoree.modeling.api.xmi.XMIModelSerializer()
    }
    override fun createXMILoader(): org.kevoree.modeling.api.xmi.XMIModelLoader {
        return org.kevoree.modeling.api.xmi.XMIModelLoader(this)
    }
    override fun createModelCompare(): org.kevoree.modeling.api.compare.ModelCompare {
        return org.kevoree.modeling.api.compare.ModelCompare(this)
    }

    override fun createModelCloner() : org.kevoree.modeling.api.clone.ModelCloner {
        return org.kevoree.modeling.api.clone.ModelCloner(this)
    }

    override fun createModelPruner() : org.kevoree.modeling.api.ModelPruner {
        return org.kevoree.modeling.api.ModelPruner(this)
    }

}