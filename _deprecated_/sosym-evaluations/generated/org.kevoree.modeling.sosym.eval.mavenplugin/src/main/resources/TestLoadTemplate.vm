#* @vtlvariable name="ctx" type="org.kevoree.modeling.kotlin.generator.GenerationContext" *#
#* @vtlvariable name="metamodelName" type="java.lang.String" *#
#* @vtlvariable name="model" type="java.io.File" *#
#* @vtlvariable name="ProcessorHelper" type="org.kevoree.modeling.kotlin.generator.ProcessorHelperClass" *#
#* @vtlvariable name="modelName" type="java.lang.String" *#
public void timeKMFLoad${modelName}(int reps) {
try {
File localModel = new File(getClass().getResource("/${metamodelName.toLowerCase()}/${model.getName()}").toURI());
${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.loader.ModelLoader loader = new  ${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.loader.XMIModelLoader();
for(int i = 0 ; i < reps ; i++) {
kmfModel = loader.loadModelFromPath(localModel).get(0);
}
}catch (URISyntaxException e) {e.printStackTrace();}
}


public void timeEMFLoad${modelName}(int reps) {
try {
File localModel = new File(getClass().getResource("/${metamodelName.toLowerCase()}/${model.getName()}").toURI());
URI fileURI = URI.createFileURI(localModel.getAbsolutePath());
#set($formatedPackageName = $ctx.getBasePackageForUtilitiesGeneration().getName().substring(0,1).toUpperCase() + $ctx.getBasePackageForUtilitiesGeneration().getName().substring(1))
##${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration()).replaceFirst("kmf","emf")}.${formatedPackageName}Package pack = ${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration()).replaceFirst("kmf","emf")}.${formatedPackageName}Package.eINSTANCE;
for(int i = 0 ; i < reps ; i++) {
ResourceSet resourceSet = new ResourceSetImpl();
resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(Resource.Factory.Registry.DEFAULT_EXTENSION, new XMIResourceFactoryImpl());
Resource resource2 = resourceSet.createResource(fileURI);
assertTrue("Resource is null. Model URI:" + fileURI.toString(), resource2 != null);
resource2.load(null);
emfModel = resource2.getContents().get(0);
//EcoreUtil.resolveAll(resource2);
assertTrue("Contents is null or void " + resource2.getContents().toString(), resource2.getContents() != null && resource2.getContents().size()!=0);
}
}catch (URISyntaxException e) {e.printStackTrace();} catch (IOException e) {e.printStackTrace();}
}







