#* @vtlvariable name="ctx" type="org.kevoree.modeling.kotlin.generator.GenerationContext" *#
#* @vtlvariable name="metamodelName" type="java.lang.String" *#
#* @vtlvariable name="model" type="java.io.File" *#
#* @vtlvariable name="ProcessorHelper" type="org.kevoree.modeling.kotlin.generator.ProcessorHelperClass" *#
#* @vtlvariable name="modelName" type="java.lang.String" *#
public void timeKMFSave${modelName}(int reps) {
try {
${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.serializer.ModelSerializer serializer = new ${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.serializer.XMIModelSerializer();
for(int i = 0 ; i < reps ; i++) {
File tempFile = File.createTempFile("${metamodelName}_${modelName}_"+System.currentTimeMillis(),".tmp");
//System.out.println(tempFile.getAbsolutePath());
tempFile.deleteOnExit();
FileOutputStream fos = new FileOutputStream(tempFile);
serializer.serialize(kmfModel, fos);
fos.flush();
fos.close();
}
}catch (IOException e) {e.printStackTrace();}
}


public void timeEMFSave${modelName}(int reps) {
try {
Resource.Factory.Registry reg = Resource.Factory.Registry.INSTANCE;
Map<String, Object> m = reg.getExtensionToFactoryMap();
m.put("xmi", new XMIResourceFactoryImpl());
for(int i = 0 ; i < reps ; i++) {
File tempFile = File.createTempFile("${metamodelName}_${modelName}_"+System.currentTimeMillis(),".xmi");
//System.out.println(tempFile.getAbsolutePath());
tempFile.deleteOnExit();
URI fileURI = URI.createFileURI(tempFile.getAbsolutePath());
ResourceSet resourceSet = new ResourceSetImpl();
Resource resource2 = resourceSet.createResource(fileURI);
resource2.getContents().add(emfModel);
resource2.save(Collections.EMPTY_MAP);
}
}catch (IOException e) {e.printStackTrace();}
}






