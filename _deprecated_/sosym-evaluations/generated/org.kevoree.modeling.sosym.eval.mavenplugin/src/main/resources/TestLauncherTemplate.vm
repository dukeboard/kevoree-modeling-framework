#* @vtlvariable name="ctx" type="org.kevoree.modeling.kotlin.generator.GenerationContext" *#
#* @vtlvariable name="metamodelName" type="java.lang.String" *#
#* @vtlvariable name="modelName" type="java.lang.String" *#
#* @vtlvariable name="ProcessorHelper" type="org.kevoree.modeling.kotlin.generator.ProcessorHelperClass" *#

#*
@Test
public void launcherKMFChainTest() {

${metamodelName}${modelName}Test test = new ${metamodelName}${modelName}Test();
test.setUp();

TreeIterator modelIterator = test.emfModel.eAllContents();
int count = 0;
while(modelIterator.hasNext()) {
count++;
modelIterator.next();
}


MemoryMXBean beanMemory = ManagementFactory.getMemoryMXBean();
long memoryUsedBefore = beanMemory.getHeapMemoryUsage().getUsed();
long kmfStart = System.nanoTime();

test.timeKMFLoad${modelName}(1);
test.timeKMFClone${modelName}(10);
test.timeKMFLookup${modelName}(1);
test.timeKMFSave${modelName}(1);


long kmfStop = System.nanoTime();
long memoryUsedAfter = beanMemory.getHeapMemoryUsage().getUsed();

PrintWriter pr = null;
try {

File results = new File("SosymTestResults.csv");

if(!results.exists()) {
pr = new PrintWriter(results);
pr.println("method;metamodel;model;nb model elements;duration(ns);memory used(MB)");
} else {
pr = new PrintWriter(new BufferedWriter(new FileWriter(results, true)));
}
pr.print("KMF;");
pr.print("${metamodelName};");
pr.print("${modelName};");
pr.print(count + ";");
pr.print((kmfStop - kmfStart) + ";");
pr.print("" + ((memoryUsedAfter-memoryUsedBefore) / Math.pow(10,6)));
pr.println();

} catch (IOException e) {
e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
} finally {
if(pr != null) {
pr.flush();
pr.close();
}
}

}





@Test
public void launcherEMFChainTest() {

${metamodelName}${modelName}Test test = new ${metamodelName}${modelName}Test();
test.setUp();

TreeIterator modelIterator = test.emfModel.eAllContents();
int count = 0;
while(modelIterator.hasNext()) {
count++;
modelIterator.next();
}

MemoryMXBean beanMemory = ManagementFactory.getMemoryMXBean();
long memoryUsedBefore = beanMemory.getHeapMemoryUsage().getUsed();
long emfStart = System.nanoTime();


test.timeEMFLoad${modelName}(1);
test.timeEMFClone${modelName}(10);
test.timeEMFLookup${modelName}(1);
test.timeEMFSave${modelName}(1);


long emfStop = System.nanoTime();
long memoryUsedAfter = beanMemory.getHeapMemoryUsage().getUsed();

PrintWriter pr = null;
try {

File results = new File("SosymTestResults.csv");

if(!results.exists()) {
pr = new PrintWriter(results);
pr.println("method;metamodel;model;nb model elements;duration(ns);memory used(MB)");
} else {
pr = new PrintWriter(new BufferedWriter(new FileWriter(results, true)));
}
pr.print("EMF;");
pr.print("${metamodelName};");
pr.print("${modelName};");
pr.print(count + ";");
pr.print((emfStop - emfStart) + ";");
pr.print("" + ((memoryUsedAfter-memoryUsedBefore) / Math.pow(10,6)));
pr.println();

} catch (IOException e) {
e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
} finally {
if(pr != null) {
pr.flush();
pr.close();
}
}

}

*#







@Test
public void launcherOfTest() {
${metamodelName}${modelName}Test test = new ${metamodelName}${modelName}Test();
System.out.println("Setting up the test...");
test.setUp();
System.out.println("Done.");

System.gc();
try {
Thread.sleep(4000);
} catch (InterruptedException e) {}

System.out.println("Loading in EMF...");
long loadEmfStart = System.nanoTime();
test.timeEMFLoad${modelName}(1);
long loadEmfStop = System.nanoTime();
System.out.println("Done.");

System.gc();
try {
Thread.sleep(4000);
} catch (InterruptedException e) {}

System.out.println("Loading in KMF...");
long loadKmfStart = System.nanoTime();
test.timeKMFLoad${modelName}(1);
long loadKmfStop = System.nanoTime();
System.out.println("Done.");

System.gc();
try {
Thread.sleep(4000);
} catch (InterruptedException e) {}

System.out.println("Saving in EMF...");
long saveEmfStart = System.nanoTime();
test.timeEMFSave${modelName}(1);
long saveEmfStop = System.nanoTime();
System.out.println("Done.");

System.gc();
try {
Thread.sleep(4000);
} catch (InterruptedException e) {}

System.out.println("Saving in KMF...");
long saveKmfStart = System.nanoTime();
test.timeKMFSave${modelName}(1);
long saveKmfStop = System.nanoTime();
System.out.println("Done.");

System.gc();
try {
Thread.sleep(4000);
} catch (InterruptedException e) {}

System.out.println("Cloning in EMF...");
long cloneEmfStart = System.nanoTime();
test.timeEMFClone${modelName}(1);
long cloneEmfStop = System.nanoTime();
System.out.println("Done.");

System.gc();
try {
Thread.sleep(4000);
} catch (InterruptedException e) {}

System.out.println("Cloning in KMF...");
long cloneKmfStart = System.nanoTime();
test.timeKMFClone${modelName}(1);
long cloneKmfStop = System.nanoTime();
System.out.println("Done.");

System.gc();
try {
Thread.sleep(4000);
} catch (InterruptedException e) {}


/*
System.out.println("Building KMFLists ...");
test.buildKmfContainementList((${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.container.KMFContainer)test.kmfModel, false);
test.buildKmfContainementList((${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.container.KMFContainer) test.kmfModelClone, true);
System.out.println("Done.");
*/

System.out.println("Lookup in EMF...");
long lookupEmfStart = System.nanoTime();
test.timeEMFLookup${modelName}(1);
long lookupEmfStop = System.nanoTime();
System.out.println("Done.");

System.gc();
try {
Thread.sleep(4000);
} catch (InterruptedException e) {}

System.out.println("Lookup in KMF...");
long lookupKmfStart = System.nanoTime();
test.timeKMFLookup${modelName}(1);
long lookupKmfStop = System.nanoTime();
//System.out.println("Path:"+ test.path + " NoPath:" + test.noPath + " Done.");

TreeIterator modelIterator = test.emfModel.eAllContents();
int count${modelName} = 0;
while(modelIterator.hasNext()) {
count${modelName}++;
modelIterator.next();
}

PrintWriter pr = null;
try {

File results = new File("../org.kevoree.modeling.sosym.eval.root/SosymTestResults.csv");
System.out.println("Printing results in:" + results.getAbsolutePath());

if(!results.exists()) {
pr = new PrintWriter(results);
pr.println("model;Loading(ms);Cloning(ms);Lookup(ms);Saving(ms);with path; without path");
} else {
pr = new PrintWriter(new BufferedWriter(new FileWriter(results, true)));
}
//pr.print("EMF;");
pr.print("${metamodelName}:${modelName} (EMF) "+count${modelName}+" elements, "+((test.path*100)/count${modelName})+"% with path;");
//pr.print("${modelName};");
//pr.print(count + ";");
pr.print(Math.round((loadEmfStop - loadEmfStart) / Math.pow(10,6)) + ";");
pr.print(Math.round((cloneEmfStop - cloneEmfStart)/ Math.pow(10,6)) + ";");
pr.print(Math.round((lookupEmfStop - lookupEmfStart)/ Math.pow(10,6)) + ";");
pr.print(Math.round((saveEmfStop - saveEmfStart)/ Math.pow(10,6)) + ";");
pr.print("NN;");
pr.print("NN");
pr.println();

//pr.print("KMF;");
//pr.print("${metamodelName};");
pr.print("${metamodelName}:${modelName} (KMF) "+count${modelName}+" elements, "+((test.path*100)/count${modelName})+"% with path;");
//pr.print("${modelName};");
//pr.print(count + ";");
pr.print(Math.round((loadKmfStop - loadKmfStart)/ Math.pow(10,6)) + ";");
pr.print(Math.round((cloneKmfStop - cloneKmfStart)/ Math.pow(10,6)) + ";");
pr.print(Math.round((lookupKmfStop - lookupKmfStart)/ Math.pow(10,6)) + ";");
pr.print(Math.round((saveKmfStop - saveKmfStart)/ Math.pow(10,6)) + ";");
pr.print(test.path+ ";");
pr.print(test.noPath+"");
pr.println();

} catch (IOException e) {
e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
} finally {
if(pr != null) {
pr.flush();
pr.close();
}
}

}
