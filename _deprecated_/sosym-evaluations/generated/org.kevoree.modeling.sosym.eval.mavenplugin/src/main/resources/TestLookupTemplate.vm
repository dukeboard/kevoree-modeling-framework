#* @vtlvariable name="ctx" type="org.kevoree.modeling.kotlin.generator.GenerationContext" *#
#* @vtlvariable name="metamodelName" type="java.lang.String" *#
#* @vtlvariable name="model" type="java.io.File" *#
#* @vtlvariable name="ProcessorHelper" type="org.kevoree.modeling.kotlin.generator.ProcessorHelperClass" *#
#* @vtlvariable name="modelName" type="java.lang.String" *#

/*

java.util.ArrayList<${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.container.KMFContainer> kmfAllContanedList = new java.util.ArrayList<${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.container.KMFContainer>();
    java.util.ArrayList<${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.container.KMFContainer> kmfCloneAllContanedList = new java.util.ArrayList<${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.container.KMFContainer>();

        private void buildKmfContainementList(${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.container.KMFContainer modelElem, boolean isClone) {
        if(!isClone) {
        kmfAllContanedList.add(modelElem);
        for(Object o : modelElem.selectByQuery("contained[*]")) {
        buildKmfContainementList((${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.container.KMFContainer) o, false);
        }
        } else {
        kmfCloneAllContanedList.add(modelElem);
        for(Object o : modelElem.selectByQuery("contained[*]")) {
        buildKmfContainementList((${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.container.KMFContainer) o, true);
        }
        }
        }


int path = 0;
int noPath = 0;
public void timeKMFLookup${modelName}(int reps) {
for(int i = 0 ; i < reps ; i++) {
//System.out.println("Looking for " + kmfAllContanedList.size() + " elements");
for(${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.container.KMFContainer modelElem : kmfAllContanedList) {

if(modelElem.path() != null && modelElem.path() != "") {
path++;
if(((${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.container.KMFContainer)kmfModelClone).findByPath(modelElem.path()) != null) {
//System.out.println("kmf elem found");
} else {
//System.out.println("kmf elem NOT found");
}
} else {
noPath++;
for(${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.container.KMFContainer cloneModelElem : kmfCloneAllContanedList) {
if(cloneModelElem.modelEquals(modelElem)) {
//System.out.println("kmf elem found (equals)");
break;
}
}
}
}
}
}
*/


int path = 0;
int noPath = 0;
public void timeKMFLookup${modelName}(int reps) {
for (int i = 0; i < reps; i++) {
${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.container.KMFContainer model = (${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.container.KMFContainer) kmfModel;
${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.container.KMFContainer modelCloned = (${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.container.KMFContainer) kmfModelClone;
for (${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.container.KMFContainer modelElem : model.containedAllElements()) {
String elementPth = modelElem.path();
if (elementPth != null && elementPth != "") {
path++;
modelCloned.findByPath(elementPth);
} else {
noPath++;
for (${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.container.KMFContainer clonedElem : modelCloned.containedAllElements()) {
if (modelElem.modelEquals(clonedElem)) {
break;
}
}
}
}
}
}


public void timeEMFLookup${modelName}(int reps) {
EcoreUtil.EqualityHelper helper = new EcoreUtil.EqualityHelper();
for(int i = 0 ; i < reps ; i++) {

TreeIterator m1It = emfModel.eAllContents();
while(m1It.hasNext()) {
EObject modelElem1 = (EObject)m1It.next();
TreeIterator m2It = emfModelClone.eAllContents();
while(m2It.hasNext()) {
EObject modelElem2 = (EObject)m2It.next();
if(helper.equals(modelElem1, modelElem2)) {
break;
}
}
}
}
}



