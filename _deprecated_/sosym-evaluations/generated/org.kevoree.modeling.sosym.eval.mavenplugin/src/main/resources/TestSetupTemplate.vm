#* @vtlvariable name="ctx" type="org.kevoree.modeling.kotlin.generator.GenerationContext" *#
#* @vtlvariable name="metamodelName" type="java.lang.String" *#
#* @vtlvariable name="model" type="java.io.File" *#
#* @vtlvariable name="ProcessorHelper" type="org.kevoree.modeling.kotlin.generator.ProcessorHelperClass" *#
public void setUp() {
    try {
        File localModel = new File(getClass().getResource("/${metamodelName.toLowerCase()}/${model.getName()}").toURI());
        ${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.loader.ModelLoader loader = new  ${ProcessorHelper.fqn($ctx, $ctx.getBasePackageForUtilitiesGeneration())}.loader.XMIModelLoader();
        kmfModel = loader.loadModelFromPath(localModel).get(0);
        URI fileURI = URI.createFileURI(localModel.getAbsolutePath());
        ResourceSet resourceSet = new ResourceSetImpl();
        resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(Resource.Factory.Registry.DEFAULT_EXTENSION, new XMIResourceFactoryImpl());

        #foreach($package in $ctx.packageFactoryMap().keySet())
            #set($lastIndexOfPoint = $package.lastIndexOf(".")+1)
            #set($formatedPackageName = $package.substring($lastIndexOfPoint).substring(0,1).toUpperCase() + $package.substring($lastIndexOfPoint).substring(1))
        resourceSet.getPackageRegistry().put($package.replaceFirst("kmf","emf").${formatedPackageName}Package.eNS_URI, $package.replaceFirst("kmf","emf").${formatedPackageName}Package.eINSTANCE);
        #end
        Resource resource2 = resourceSet.createResource(fileURI);
        assertTrue("Resource is null. Model URI:" + fileURI.toString(), resource2 != null);
        resource2.load(null);
        //EcoreUtil.resolveAll(resource2);
        assertTrue("Contents is null or void " + resource2.getContents().toString(), resource2.getContents() != null && resource2.getContents().size()!=0);
        emfModel = resource2.getContents().get(0);
    }catch (URISyntaxException e) {e.printStackTrace();} catch (IOException e) {e.printStackTrace();}
}


