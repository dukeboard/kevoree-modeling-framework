#set($classDeclaration = $context.classDeclaration)
package ${classDeclaration.pack}.impl;

public class ${classDeclaration.name}Impl extends ${context.generationContext.metaModelPackage}.impl.Abstract${context.generationContext.metaModelName}Object implements ${classDeclaration.pack}.${classDeclaration.name} {

    public ${classDeclaration.name}Impl(${context.generationContext.metaModelPackage}.${context.generationContext.metaModelName}View p_factory, long p_uuid, org.kevoree.modeling.api.time.TimeTree p_timeTree, org.kevoree.modeling.api.meta.MetaClass p_metaClass) {
        super(p_factory, p_uuid, p_timeTree, p_metaClass);
    }

    @Override
    public org.kevoree.modeling.api.meta.MetaAttribute[] metaAttributes() {
        return ${classDeclaration.pack}.${classDeclaration.name}.METAATTRIBUTES.values();
    }

    @Override
        public org.kevoree.modeling.api.meta.MetaReference[] metaReferences() {
        return ${classDeclaration.pack}.${classDeclaration.name}.METAREFERENCES.values();
    }

    @Override
    public org.kevoree.modeling.api.meta.MetaOperation[] metaOperations() {
        return ${classDeclaration.pack}.${classDeclaration.name}.METAOPERATIONS.values();
    }


#foreach($attribute in $classDeclaration.attributes)
    #if($attribute.single)
    @Override
    public $context.generationContext.getHelper().convertToJavaType(${attribute.getType()}) get${context.generationContext.helper.toCamelCase($attribute.getName())}() {
        return ($context.generationContext.getHelper().convertToJavaType($attribute.getType())) get(${classDeclaration.pack}.${classDeclaration.name}.METAATTRIBUTES.$attribute.getName().toUpperCase());
    }

    @Override
    public ${classDeclaration.pack}.${classDeclaration.name} set${context.generationContext.helper.toCamelCase(${attribute.getName()})}($context.generationContext.getHelper().convertToJavaType(${attribute.getType()}) p_obj) {
        set(${classDeclaration.pack}.${classDeclaration.name}.METAATTRIBUTES.$attribute.getName().toUpperCase(), p_obj);
        return this;
    }
    #{else}
    @Override
    public ${classDeclaration.pack}.${classDeclaration.name} add${context.generationContext.helper.toCamelCase(${attribute.getName()})}($context.generationContext.getHelper().convertToJavaType(${attribute.getType()}) p_obj) {
        mutate(org.kevoree.modeling.api.KActionType.ADD, ${classDeclaration.pack}.${classDeclaration.name}.METAATTRIBUTES.${attribute.getName().toUpperCase()}, p_obj, true);
        return this;
    }

    @Override
    public ${classDeclaration.pack}.${classDeclaration.name} remove${context.generationContext.helper.toCamelCase(${attribute.getName()})}($context.generationContext.getHelper().convertToJavaType(${attribute.getType()}) p_obj) {
        mutate(org.kevoree.modeling.api.KActionType.REMOVE, ${classDeclaration.pack}.${classDeclaration.name}.METAATTRIBUTES.${attribute.getName().toUpperCase()}, p_obj, true;
        return this;
    }

    @Override
    public void each${context.generationContext.helper.toCamelCase(${attribute.getName()})}(org.kevoree.modeling.api.Callback<$context.generationContext.getHelper().convertToJavaType(${attribute.getType()})> p_callback, org.kevoree.modeling.api.Callback<Throwable> p_end) {
        each(${classDeclaration.pack}.${classDeclaration.name}.METAATTRIBUTES.${attribute.getName().toUpperCase()}, p_callback, p_end);
    }
    #end
#end


#foreach($ref in $classDeclaration.references)
    #if($ref.single)
    @Override
    public ${classDeclaration.pack}.${classDeclaration.name} set${context.generationContext.helper.toCamelCase(${ref.getName()})}(${ref.getType().fqn} p_obj) {
        mutate(org.kevoree.modeling.api.KActionType.SET, ${classDeclaration.pack}.${classDeclaration.name}.METAREFERENCES.${ref.getName().toUpperCase()}, p_obj, true);
        return this;
    }

    @Override
    public void get${context.generationContext.helper.toCamelCase(${ref.getName()})}(org.kevoree.modeling.api.Callback<${ref.getType().fqn}> p_callback) {
        each(${classDeclaration.pack}.${classDeclaration.name}.METAREFERENCES.${ref.getName().toUpperCase()}, p_callback, null);
    }
    #{else}
    @Override
    public ${classDeclaration.pack}.${classDeclaration.name} add${context.generationContext.helper.toCamelCase(${ref.getName()})}(${ref.getType().fqn} p_obj) {
        mutate(org.kevoree.modeling.api.KActionType.ADD, ${classDeclaration.pack}.${classDeclaration.name}.METAREFERENCES.${ref.getName().toUpperCase()}, p_obj, true);
        return this;
    }

    @Override
    public ${classDeclaration.pack}.${classDeclaration.name} remove${context.generationContext.helper.toCamelCase(${ref.getName()})}(${ref.getType().fqn} p_obj) {
        mutate(org.kevoree.modeling.api.KActionType.REMOVE, ${classDeclaration.pack}.${classDeclaration.name}.METAREFERENCES.${ref.getName().toUpperCase()}, p_obj, true);
        return this;
    }

    @Override
    public void each${context.generationContext.helper.toCamelCase(${ref.getName()})}(org.kevoree.modeling.api.Callback<${ref.getType().fqn}> p_callback, org.kevoree.modeling.api.Callback<Throwable> p_end) {
        each(${classDeclaration.pack}.${classDeclaration.name}.METAREFERENCES.${ref.getName().toUpperCase()}, p_callback, p_end);
    }

    public int sizeOf${context.generationContext.helper.toCamelCase($ref.getName())}() {
        return size(${classDeclaration.pack}.${classDeclaration.name}.METAREFERENCES.${ref.getName().toUpperCase()});
    }
    #end
#end

#foreach($operation in $classDeclaration.operations)
    public void ${operation.name}(#foreach($p in $operation.inputParams)$p.type $p.name, #{end}org.kevoree.modeling.api.Callback<#if(${operation.returnParam})$operation.returnParam.type#{else}Boolean#end> result){
        Object[] ${operation.name}_params = new Object[$operation.inputParams.size()];
    #set($paramIndex = 0)
#foreach($p in $operation.inputParams)
        ${operation.name}_params[$paramIndex] = $p.name;
#set($paramIndex = $paramIndex + 1)
#{end}
        view().dimension().universe().storage().operationManager().call(this, METAOPERATIONS.${operation.name.toUpperCase()}, ${operation.name}_params, new org.kevoree.modeling.api.Callback<Object>() {
            public void on(Object o) {
                if(result!=null){
                    result.on((#if(${operation.returnParam})$operation.returnParam.type#{else}Boolean#end)o);
                }
            }
        });
    }
#end

}
#* @vtlvariable name="context" type="org.kevoree.modeling.generator.ClassGenerationContext" *#
#* @vtlvariable name="classDeclaration" type="org.kevoree.modeling.ast.MModelClass" *#