package ${context.classPackage}.impl;

public class ${context.className}Impl extends org.kevoree.modeling.api.abs.AbstractKObject<${context.classPackage}.${context.className}, ${context.generationContext.utilityPackage}.${context.generationContext.metaModelName}View> implements ${context.classPackage}.${context.className} {

    public ${context.className}Impl(${context.generationContext.utilityPackage}.${context.generationContext.metaModelName}View factory, org.kevoree.modeling.api.meta.MetaClass metaClass, String path, Long now, org.kevoree.modeling.api.KDimension dimension, org.kevoree.modeling.api.time.TimeTree timeTree) {
        super(factory, metaClass, path, now, dimension, timeTree);
    }

    @Override
    public org.kevoree.modeling.api.meta.MetaAttribute[] metaAttributes() {
        return METAATTRIBUTES.values();
    }

    private final org.kevoree.modeling.api.meta.MetaReference[] metaReferences = new org.kevoree.modeling.api.meta.MetaReference[0];

    @Override
    public org.kevoree.modeling.api.meta.MetaReference[] metaReferences() {
        return metaReferences;
    }

#foreach($attribute in $context.delarationsList.attributes)

    @Override
    public $attribute.getTypeDeclaration().getName() get${context.generationContext.helper.toCamelCase(${attribute.getRelationName().getText()})}() {
        return ($attribute.getTypeDeclaration().getName()) get(METAATTRIBUTES.$attribute.getRelationName().getText().toUpperCase());
    }

    @Override
    public ${context.classPackage}.${context.className} set${context.generationContext.helper.toCamelCase(${attribute.getRelationName().getText()})}($attribute.getTypeDeclaration().getName() _value) {
        set(METAATTRIBUTES.$attribute.getRelationName().getText().toUpperCase(), _value);
        return this;
    }
#end


}

#* @vtlvariable name="context" type="org.kevoree.modeling.generator.ClassGenerationContext" *#