package ${context.classDeclaration.pack}.impl;

public class ${context.classDeclaration.name}Impl extends org.kevoree.modeling.api.abs.AbstractKObject<${context.classDeclaration.pack}.${context.classDeclaration.name}, ${context.generationContext.utilityPackage}.${context.generationContext.metaModelName}View> implements ${context.classDeclaration.pack}.${context.classDeclaration.name} {

    public ${context.classDeclaration.name}Impl(${context.generationContext.utilityPackage}.${context.generationContext.metaModelName}View factory, org.kevoree.modeling.api.meta.MetaClass metaClass, String path, Long now, org.kevoree.modeling.api.KDimension dimension, org.kevoree.modeling.api.time.TimeTree timeTree) {
        super(factory, metaClass, path, now, dimension, timeTree);
    }

    @Override
    public org.kevoree.modeling.api.meta.MetaAttribute[] metaAttributes() {
        return METAATTRIBUTES.values();
    }

    @Override
    public org.kevoree.modeling.api.meta.MetaReference[] metaReferences() {
        return METAREFERENCES.values();
    }

#foreach($attribute in $context.classDeclaration.attributes)
    @Override
    public ${attribute.getType()} get${context.generationContext.helper.toCamelCase($attribute.getName())}() {
        return ($attribute.getType()) get(METAATTRIBUTES.$attribute.getName().toUpperCase());
    }

    @Override
    public ${context.classDeclaration.pack}.${context.classDeclaration.name} set${context.generationContext.helper.toCamelCase(${attribute.getName()})}($attribute.getType() _value) {
        set(METAATTRIBUTES.$attribute.getName().toUpperCase(), _value);
        return this;
    }
#end


}

#* @vtlvariable name="context" type="org.kevoree.modeling.generator.ClassGenerationContext" *#