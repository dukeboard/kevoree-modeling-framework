#set($classDeclaration = $context.classDeclaration)
public enum METAREFERENCES implements org.kevoree.modeling.api.meta.MetaReference {
#if($classDeclaration.references.size() == 0)
;//Nothing in this ENUM
#{else}
#set($relIdx = 0)
#set($relIdxMax = $classDeclaration.references.size() - 1)
#foreach($rel in $classDeclaration.references)
    ${rel.getName().toUpperCase()}("$rel.getName()",$enumIdx,#if($rel.contained)true#{else}false#end, #if($rel.single)true#{else}false#end, ${context.generationContext.utilityPackage}.${context.generationContext.metaModelName}View.METACLASSES.${rel.getType().getFqn().toUpperCase().replace(".","_")}, #if(!${rel.getOpposite()})null#{else}${rel.getType().getFqn()}.METAREFERENCES.${rel.opposite.name.toUpperCase()}#end)#if($relIdx < $relIdxMax),
#{else};
#end
    #set($enumIdx = $enumIdx + 1)
    #set($relIdx = $relIdx + 1)
#end
#end
    private String name;

    private int index;

    private boolean contained;
    private boolean single;
    private org.kevoree.modeling.api.meta.MetaClass metaType;
    private org.kevoree.modeling.api.meta.MetaReference opposite;

    public int index() {
        return index;
    }

    public String metaName() {
        return name;
    }

    public boolean contained() {
        return contained;
    }

    public boolean single() {
        return single;
    }

    public org.kevoree.modeling.api.meta.MetaClass metaType() {
        return metaType;
    }

    public org.kevoree.modeling.api.meta.MetaReference opposite() {
        return opposite;
    }

    public org.kevoree.modeling.api.meta.MetaClass origin(){
        return ${context.generationContext.utilityPackage}.${context.generationContext.metaModelName}View.METACLASSES.${classDeclaration.fqn.toUpperCase().replace(".","_")};
    }

    METAREFERENCES(String name, int index, boolean contained, boolean single, org.kevoree.modeling.api.meta.MetaClass metaType, org.kevoree.modeling.api.meta.MetaReference opposite) {
        this.name = name;
        this.index = index;
        this.contained = contained;
        this.single = single;
        this.metaType = metaType;
        this.opposite = opposite;
    }
}

#* @vtlvariable name="context" type="org.kevoree.modeling.generator.ClassGenerationContext" *#
#* @vtlvariable name="classDeclaration" type="org.kevoree.modeling.ast.MModelClass" *#