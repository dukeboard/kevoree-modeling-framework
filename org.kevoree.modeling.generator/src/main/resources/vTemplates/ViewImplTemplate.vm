package ${context.utilityPackage}.impl;

public class ${context.metaModelName}ViewImpl extends org.kevoree.modeling.api.abs.AbstractKView implements ${context.utilityPackage}.${context.metaModelName}View {

    public ${context.metaModelName}ViewImpl(long now, org.kevoree.modeling.api.KDimension dimension) {
        super(now, dimension);
    }

    @Override
    public org.kevoree.modeling.api.KObject create(org.kevoree.modeling.api.meta.MetaClass clazz) {
        if (clazz == null) {
            return null;
        }
        org.kevoree.modeling.api.time.TimeTree newTimeTree = new org.kevoree.modeling.api.time.impl.DefaultTimeTree().insert(now());
        switch (clazz.index()) {
#set($clsIdx = 0)
#foreach($class in $context.classDeclarationsList.keySet())
    #set($lastIdx = $class.lastIndexOf(".")+1)
            case $clsIdx:
                return manageCache(new $class.substring($lastIdx)Impl(this, METACLASSES.$class.toUpperCase().replace(".","_"), dimension().universe().storage().nextObjectKey(), now(), dimension(), newTimeTree));
#set($clsIdx = $clsIdx+1)
#end
            default:
                return null;
        }
    }

    @Override
    public org.kevoree.modeling.api.meta.MetaClass[] metaClasses() {
        return ${context.utilityPackage}.${context.metaModelName}View.METACLASSES.values();
    }

#foreach($class in $context.classDeclarationsList.keySet())
#set($lastIdx = $class.lastIndexOf(".")+1)
    @Override
    public $class create$class.substring($lastIdx)() {
        return ($class) create(METACLASSES.$class.toUpperCase().replace(".","_"));
    }
#end

}



#* @vtlvariable name="context" type="org.kevoree.modeling.generator.GenerationContext" *#