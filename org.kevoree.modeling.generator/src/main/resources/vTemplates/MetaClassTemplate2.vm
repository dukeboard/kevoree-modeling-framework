#set($classDeclaration = $context.classDeclaration)
package ${classDeclaration.pack}.meta;

public class Meta${classDeclaration.name} extends org.kevoree.modeling.api.abs.AbstractMetaClass {

public static Meta${classDeclaration.name} build(org.kevoree.modeling.api.meta.MetaModel p_origin) {
    return new Meta${classDeclaration.name}(p_origin);
}

#foreach($attribute in $classDeclaration.attributes)
    public final org.kevoree.modeling.api.meta.MetaAttribute ATT_${attribute.name.toUpperCase()};
#end

#foreach($reference in $classDeclaration.references)
    public final org.kevoree.modeling.api.meta.MetaReference REF_${reference.name.toUpperCase()};
#end

#foreach($operation in $classDeclaration.operations)
    public final org.kevoree.modeling.api.meta.MetaOperation OP_${operation.name.toUpperCase()};
#end

    private Meta${classDeclaration.name}(org.kevoree.modeling.api.meta.MetaModel p_origin) {
        super("${classDeclaration.fqn}", ${classDeclaration.index}, p_origin);

        org.kevoree.modeling.api.meta.MetaAttribute[] temp_attributes = new org.kevoree.modeling.api.meta.MetaAttribute[${classDeclaration.attributes.size()}];
        #foreach($attribute in $classDeclaration.attributes)
            #if($context.generationContext.helper.isNull($attribute.precision))
            ATT_${attribute.name.toUpperCase()} = new org.kevoree.modeling.api.abs.AbstractMetaAttribute("${attribute.name}", ${attribute.index}, 0, #if($attribute.id)true#{else}false#end, org.kevoree.modeling.api.meta.MetaType.$attribute.type.toUpperCase(), org.kevoree.modeling.api.extrapolation.DiscreteExtrapolation.instance(), this);
            #else
            ATT_${attribute.name.toUpperCase()} = new org.kevoree.modeling.api.abs.AbstractMetaAttribute("${attribute.name}", ${attribute.index}, #if($context.generationContext.helper.isNull(${attribute.precision}))0#{else}$attribute.precision#end, #if($attribute.id)true#{else}false#end, org.kevoree.modeling.api.meta.MetaType.$attribute.type.toUpperCase(), org.kevoree.modeling.api.extrapolation.PolynomialExtrapolation.instance(), this);
            #end
            temp_attributes[${attribute.attIndex}] = ATT_${attribute.name.toUpperCase()};

        #end

        org.kevoree.modeling.api.meta.MetaReference[] temp_references = new org.kevoree.modeling.api.meta.MetaReference[${classDeclaration.references.size()}];
        #foreach($reference in $classDeclaration.references)

            #if($context.generationContext.helper.isNull(${reference.opposite}))
            REF_${reference.name.toUpperCase()} = new org.kevoree.modeling.api.abs.AbstractMetaReference("${reference.name}", ${reference.index}, ${reference.contained}, ${reference.single}, ${reference.type.index}, null, this);
            #else
            REF_${reference.name.toUpperCase()} = new org.kevoree.modeling.api.abs.AbstractMetaReference("${reference.name}", ${reference.index}, ${reference.contained}, ${reference.single}, ${reference.type.index}, ${reference.opposite.refIndex}, this);
            #end

        temp_references[${reference.refIndex}] = REF_${reference.name.toUpperCase()};
        #end

        org.kevoree.modeling.api.meta.MetaOperation[] temp_operations = new org.kevoree.modeling.api.meta.MetaOperation[${classDeclaration.operations.size()}];
        #foreach($operation in $classDeclaration.operations)
        OP_${operation.name.toUpperCase()} = new org.kevoree.modeling.api.abs.AbstractMetaOperation("${operation.name}", ${operation.index}, this);
        temp_operations[${operation.opIndex}] = OP_${operation.name.toUpperCase()};
        #end

        init(temp_attributes, temp_references, temp_operations);
    }

}
#* @vtlvariable name="context" type="org.kevoree.modeling.generator.ClassGenerationContext" *#
#* @vtlvariable name="classDeclaration" type="org.kevoree.modeling.ast.MModelClass" *#
